# -*- coding: utf-8 -*-
"""RFM Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SkZlDPOU4a0SHQq6qdRtiL-Oiy-IurCd
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt

#gathering Data
data_order=pd.read_csv("/content/olist_orders_dataset.csv")
data_order_item=pd.read_csv("/content/olist_order_items_dataset.csv")

#Data wrangling
def data_summary(data_frame) :
  print("##################### statistics summary #####################")
  print(data_frame.describe())
  print("##################### Data Type #####################")
  print(data_frame.info())
  print("##################### Missing Value #####################")
  print(data_frame.isnull().sum())
  print("##################### Duplicated Data #####################")
  print(data_frame.duplicated().sum())
  print("##################### Quantiles #####################")
  print(data_frame.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)

#Data order
data_summary(data_order)

#Data Order Item
data_summary(data_order_item)

data_order=data_order.drop(["order_approved_at", "order_delivered_carrier_date", "order_delivered_customer_date", "order_estimated_delivery_date"], axis=1)

data_order.head()

#merge kedua data
data_merge= pd.merge(
    left=data_order_item,
    right=data_order,
    how="left",
    left_on="order_id",
    right_on="order_id"
)
data_merge.head()

#data["total_price"]=data["quantity"]*data["price"]
data_rfm=data_merge.groupby(by="customer_id", as_index=False).agg({
    "order_id" : "count",
    "price" : "sum",
    "order_purchase_timestamp" : "max"
})
data_rfm.columns=["customer_id","frequency", "monetary", "date_max"]
data_rfm.head()

data_rfm["recency"] = pd.to_datetime(data_rfm["date_max"]).dt.date
recent_date = pd.to_datetime(data_rfm["recency"]).dt.date.max()
data_rfm["recency"] = data_rfm["recency"].apply(lambda x: (recent_date - x).days)
data_rfm.head()

new_cols = ["customer_id","recency","frequency", "monetary", "date_max"]
data_rfm=data_rfm.reindex(columns=new_cols)

data_rfm=data_rfm.drop("date_max", axis=1)

#data_rfm=data_rfm[(data_rfm["frequency"]>2)]

data_summary(data_rfm)

data_rfm['r_rank'] = data_rfm['recency'].rank(ascending=False)
data_rfm['f_rank'] = data_rfm['frequency'].rank(ascending=True)
data_rfm['m_rank'] = data_rfm['monetary'].rank(ascending=True)

data_rfm.head()

data_rfm["recency_score"] = pd.qcut(data_rfm['recency'], 5, labels=[5, 4, 3, 2, 1])
data_rfm["frequency_score"] = pd.qcut(data_rfm["frequency"].rank(method="first"), 5, labels=[1, 2, 3, 4, 5])

# normalizing the rank of the customers
data_rfm['r_rank_norm'] = (data_rfm['r_rank']/data_rfm['r_rank'].max())*100
data_rfm['f_rank_norm'] = (data_rfm['f_rank']/data_rfm['f_rank'].max())*100
data_rfm['m_rank_norm'] = (data_rfm['m_rank']/data_rfm['m_rank'].max())*100

data_rfm.drop(columns=['r_rank', 'f_rank', 'm_rank'], inplace=True)

data_rfm.head()

data_rfm['RFM_score'] = 0.15*data_rfm['r_rank_norm']+0.28 * \
    data_rfm['f_rank_norm']+0.57*data_rfm['m_rank_norm']
data_rfm['RFM_score'] *= 0.05
data_rfm = data_rfm.round(2)
data_rfm[['customer_id', 'RFM_score']].head(7)

data_rfm["customer_segment"] = np.where(
    data_rfm['RFM_score'] > 4.5, "Top customers", (np.where(
        data_rfm['RFM_score'] > 4, "High value customer",(np.where(
            data_rfm['RFM_score'] > 3, "Medium value customer", np.where(
                data_rfm['RFM_score'] > 1.6, 'Low value customers', 'lost customers'))))))

data_rfm[['customer_id', 'RFM_score', 'customer_segment']].head(20)

customer_segment_df = data_rfm.groupby(by="customer_segment", as_index=False).customer_id.count()
customer_segment_df

customer_segment_df["customer_id"].sum()

customer_segment_df['customer_segment'] = pd.Categorical(customer_segment_df['customer_segment'], [
    "lost customers", "Low value customers", "Medium value customer",
    "High value customer", "Top customers"
])

plt.figure(figsize=(10, 5))
colors_ = ["#72BCD4", "#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(
    x="customer_id",
    y="customer_segment",
    data=customer_segment_df.sort_values(by="customer_segment", ascending=False),
    palette=colors_
)
plt.title("Number of Customer for Each Segment", loc="center", fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='y', labelsize=12)
plt.show()

# RFM score
data_rfm["recency_score"] = pd.qcut(data_rfm['recency'], 5, labels=[5, 4, 3, 2, 1])
data_rfm["frequency_score"] = pd.qcut(data_rfm["frequency"].rank(method="first"), 5, labels=[1, 2, 3, 4, 5])


# segment naming
data_rfm['rfm_segment'] = data_rfm['recency_score'].astype(str) + data_rfm['frequency_score'].astype(str)

seg_map = {
  r'[1-2][1-2]': 'hibernating',
  r'[1-2][3-4]': 'at_risk',
  r'[1-2]5': 'cant_loose',
  r'3[1-2]': 'about_to_sleep',
  r'33': 'need_attention',
  r'[3-4][4-5]': 'loyal_customers',
  r'41': 'promising',
  r'51': 'new_customers',
  r'[4-5][2-3]': 'potential_loyalists',
  r'5[4-5]': 'champions'
}
data_rfm['rfm_segment'] = data_rfm['rfm_segment'].replace(seg_map, regex=True)

data_rfm.head()

rfm_kaggle=data_rfm.groupby("rfm_segment", as_index=False).agg({
    "customer_id" : "count"
})

plt.figure(figsize=(10, 5))
colors_ = ["#72BCD4", "#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(
    x="customer_id",
    y="rfm_segment",
    data=rfm_kaggle.sort_values(by="rfm_segment", ascending=False),
    palette=colors_
)
plt.title("Number of Customer for Each Segment", loc="center", fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='y', labelsize=12)
plt.show()